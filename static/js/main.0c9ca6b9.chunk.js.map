{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","count","isLoading","movies","add","setState","current","minus","getMovies","a","axios","get","data","console","log","setTimeout","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAgCeA,MA5Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,sBAAKC,UAAU,eAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAIK,UAAU,SAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,eAA1B,SAA0CI,GAAjCC,QAGjB,uBACA,oBAAGL,UAAU,gBAAb,UAA8BH,EAAQS,MAAM,EAAG,KAA/C,gBCoEDC,G,kNA/EbC,MAAQ,CACNC,MAAO,EACPC,WAAW,EACXC,OAAQ,I,EAGVC,IAAM,WAEJ,EAAKC,UAAS,SAAAC,GAAO,MAAK,CAAEL,MAAOK,EAAQL,MAAQ,O,EAGrDM,MAAQ,WACN,EAAKF,UAAS,SAAAC,GAAO,MAAK,CAAEL,MAAOK,EAAQL,MAAQ,O,EAGrDO,U,sBAAY,8BAAAC,EAAA,sEAGmCC,IAAMC,IAAI,yDAH7C,gBAGcR,EAHd,EAGFS,KAAQA,KAAQT,OACxB,EAAKE,SAAS,CAAEF,SAAQD,WAAW,IAJzB,2C,kEASVW,QAAQC,IAAI,SACZC,YAAW,cAER,KACHC,KAAKR,c,2CAKLK,QAAQC,IAAI,Y,6CAKZD,QAAQC,IAAI,a,+BAGJ,IAAD,EACuBE,KAAKhB,MAA3BE,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,qBAAKX,UAAU,OAAf,SACE,yBAASA,UAAU,YAAnB,SACGU,EACC,qBAAKV,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGA,qBAAKA,UAAU,SAAf,SACGW,EAAOR,KAAI,SAAAsB,GAAK,OACf,cAAC,EAAD,CAEE/B,GAAI+B,EAAM/B,GACVC,KAAM8B,EAAM9B,KACZC,MAAO6B,EAAM7B,MACbC,QAAS4B,EAAM5B,QACfC,OAAQ2B,EAAMC,mBACd3B,OAAQ0B,EAAM1B,QANT0B,EAAM/B,iB,GAvDbiC,IAAMC,YCExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0c9ca6b9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movies_movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\">{title}</h3>\r\n                <h5 className=\"movie_year\">{year}</h5>\r\n                <ul className=\"genres\">\r\n                    {genres.map((genre, index) => (\r\n                        <li key={index} className=\"genres_genre\">{genre}</li>\r\n                    ))}\r\n                </ul>\r\n                <br />\r\n                <p className=\"movie_summary\">{summary.slice(0, 140)}...</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    count: 0,\n    isLoading: true,\n    movies: []\n  };\n\n  add = () => {\n    // this.setState({ count: this.state.count + 1 }); 비효율적\n    this.setState(current => ({ count: current.count + 1 })); // current는 현재 값을 나타냄\n  };\n\n  minus = () => {\n    this.setState(current => ({ count: current.count - 1 }));\n  };\n\n  getMovies = async () => {\n    // getMovies 로딩 시간(axios.get 완료 시간)이 있으니 기다려라 (비동기)\n    // async 없으면 await 사용 불가\n    const { data: { data: { movies } } } = await axios.get(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"); // ?뒤는 rating 기준으로 sort 의미\n    this.setState({ movies, isLoading: false });\n  };\n\n  // mounting : 생성 - 로딩 순서 constructor(js), render, componentDidMount\n  componentDidMount() {\n    console.log(\"mount\");\n    setTimeout(() => {\n      // this.setState({ isLoading: false });\n    }, 3000);\n    this.getMovies();\n  };\n\n  // updating : 업데이트 - 로딩 순서 render, componentDidUpdate\n  componentDidUpdate() {\n    console.log(\"update\");\n  };\n\n  // unmounting : component 제거 (ex - 페이지 교체 등)\n  componentWillUnmount() {\n    console.log(\"unmount\");\n  };\n\n  render() {\n    const { isLoading, movies } = this.state; // this.state를 안쓰는 방법\n    return (\n      <div className=\"main\">\n        <section className=\"container\">\n          {isLoading ? (\n            <div className=\"loader\">\n              <span className=\"loader_text\">Loading...</span>\n            </div>\n          ) : (\n              <div className=\"movies\">\n                {movies.map(movie =>\n                  <Movie\n                    key={movie.id}\n                    id={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    poster={movie.medium_cover_image}\n                    genres={movie.genres} />\n                )}\n              </div>\n            )}\n        </section>\n        {/* <h1>The number is : {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button> */}\n      </div >\n    );\n  }\n}\n\n// function component : return해서 screen에 표시\n// class component : react component로부터 확장되고 screen에 표시\n// state : object, component의 data를 넣을 공간이 있고 데이터는 동적\n// → 즉, 바꾸고 싶은 data를 넣으면 됨\n// state를 직접 변경 X → render function에 적용 X → setState를 호출할 때마다 render\n\nexport default App; // export를 하지 않으면 App 함수 사용 불가\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import Play from './Play';\n\n// 여러 개를 import 할 경우 App.js 안에 새로 만든 js파일을 import할 것\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// component : HTML을 반환하는 함수"],"sourceRoot":""}